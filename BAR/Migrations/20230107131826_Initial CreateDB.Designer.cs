// <auto-generated />
using System;
using BAR.Data.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BAR.Migrations
{
    [DbContext(typeof(BarContext))]
    [Migration("20230107131826_Initial CreateDB")]
    partial class InitialCreateDB
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("BAR.Data.Models.Barcode", b =>
                {
                    b.Property<int>("BarcodeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.HasKey("BarcodeId");

                    b.ToTable("barcodes");
                });

            modelBuilder.Entity("BAR.Data.Models.Bill", b =>
                {
                    b.Property<int>("BillId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("BillCode")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("BillDateCreated")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("LogId")
                        .HasColumnType("int");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("BillId");

                    b.HasIndex("LogId");

                    b.HasIndex("UserId");

                    b.ToTable("bills");
                });

            modelBuilder.Entity("BAR.Data.Models.Brand", b =>
                {
                    b.Property<int>("BrandId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("BrandCaption")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("BrandCode")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("BrandDateCreated")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("BrandDescription")
                        .IsRequired()
                        .HasMaxLength(600)
                        .HasColumnType("varchar(600)");

                    b.Property<int?>("LogId")
                        .HasColumnType("int");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("BrandId");

                    b.HasIndex("LogId");

                    b.HasIndex("UserId");

                    b.ToTable("brands");
                });

            modelBuilder.Entity("BAR.Data.Models.Category", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("CategoryCaption")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("CategoryCode")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("CategoryDateCreated")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CategoryDescription")
                        .IsRequired()
                        .HasMaxLength(600)
                        .HasColumnType("varchar(600)");

                    b.Property<int?>("LogId")
                        .HasColumnType("int");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("CategoryId");

                    b.HasIndex("LogId");

                    b.HasIndex("UserId");

                    b.ToTable("categories");
                });

            modelBuilder.Entity("BAR.Data.Models.Grn", b =>
                {
                    b.Property<int>("GrnId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("GrnCode")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("GrnDateCreated")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("GrnReceiptCode")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("GrnReceiptDateCreated")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("LogId")
                        .HasColumnType("int");

                    b.Property<int?>("SupplierId")
                        .HasColumnType("int");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("GrnId");

                    b.HasIndex("LogId");

                    b.HasIndex("SupplierId");

                    b.HasIndex("UserId");

                    b.ToTable("grns");
                });

            modelBuilder.Entity("BAR.Data.Models.Hold", b =>
                {
                    b.Property<int>("HoldId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("HoldCode")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("HoldDateCreated")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("LogId")
                        .HasColumnType("int");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("HoldId");

                    b.HasIndex("LogId");

                    b.HasIndex("UserId");

                    b.ToTable("holds");
                });

            modelBuilder.Entity("BAR.Data.Models.Log", b =>
                {
                    b.Property<int>("LogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("LogCode")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("LogDateCreated")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("LogDateTimeIn")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("LogDateTimeOut")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LogId");

                    b.HasIndex("UserId");

                    b.ToTable("logs");
                });

            modelBuilder.Entity("BAR.Data.Models.Open", b =>
                {
                    b.Property<int>("OpenId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("LogId")
                        .HasColumnType("int");

                    b.Property<string>("OpenCode")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("OpenDateCreated")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("OpenId");

                    b.HasIndex("LogId");

                    b.HasIndex("UserId");

                    b.ToTable("opens");
                });

            modelBuilder.Entity("BAR.Data.Models.Price", b =>
                {
                    b.Property<int>("PriceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("DateOfIssue")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("LogId")
                        .HasColumnType("int");

                    b.Property<string>("PriceCode")
                        .HasColumnType("longtext");

                    b.Property<string>("PricePurpose")
                        .HasColumnType("longtext");

                    b.Property<string>("PriceReason")
                        .HasColumnType("longtext");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("PriceId");

                    b.HasIndex("LogId");

                    b.HasIndex("UserId");

                    b.ToTable("prices");
                });

            modelBuilder.Entity("BAR.Data.Models.Product", b =>
                {
                    b.Property<int>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("BrandId")
                        .HasColumnType("int");

                    b.Property<int?>("CategoryId")
                        .HasColumnType("int");

                    b.Property<int?>("LogId")
                        .HasColumnType("int");

                    b.Property<string>("ProductCaption")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("ProductCode")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("ProductDateCreated")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("TaxId")
                        .HasColumnType("int");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("ProductId");

                    b.HasIndex("BrandId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("LogId");

                    b.HasIndex("TaxId");

                    b.HasIndex("UserId");

                    b.ToTable("products");
                });

            modelBuilder.Entity("BAR.Data.Models.ProductBarcode", b =>
                {
                    b.Property<int?>("ProductId")
                        .HasColumnType("int");

                    b.Property<int?>("BarcodeId")
                        .HasColumnType("int");

                    b.Property<string>("BarcodeNumber")
                        .HasColumnType("longtext");

                    b.HasKey("ProductId", "BarcodeId");

                    b.HasIndex("BarcodeId");

                    b.ToTable("productbarcodes");
                });

            modelBuilder.Entity("BAR.Data.Models.ProductBill", b =>
                {
                    b.Property<int?>("ProductId")
                        .HasColumnType("int");

                    b.Property<int?>("BillId")
                        .HasColumnType("int");

                    b.Property<double>("BillItemPrice")
                        .HasColumnType("double");

                    b.Property<int>("QtyPurchased")
                        .HasColumnType("int");

                    b.HasKey("ProductId", "BillId");

                    b.HasIndex("BillId");

                    b.ToTable("productbills");
                });

            modelBuilder.Entity("BAR.Data.Models.ProductGrn", b =>
                {
                    b.Property<int?>("ProductId")
                        .HasColumnType("int");

                    b.Property<int?>("GrnId")
                        .HasColumnType("int");

                    b.Property<double?>("ProductItemCost")
                        .HasColumnType("double");

                    b.Property<int?>("ProductItemQty")
                        .HasColumnType("int");

                    b.Property<int>("StockAtPurchaseTime")
                        .HasColumnType("int");

                    b.HasKey("ProductId", "GrnId");

                    b.HasIndex("GrnId");

                    b.ToTable("productgrns");
                });

            modelBuilder.Entity("BAR.Data.Models.ProductHold", b =>
                {
                    b.Property<int?>("ProductId")
                        .HasColumnType("int");

                    b.Property<int?>("HoldId")
                        .HasColumnType("int");

                    b.Property<double>("HoldItemPrice")
                        .HasColumnType("double");

                    b.Property<int>("QtyPurchased")
                        .HasColumnType("int");

                    b.HasKey("ProductId", "HoldId");

                    b.HasIndex("HoldId");

                    b.ToTable("productholds");
                });

            modelBuilder.Entity("BAR.Data.Models.ProductOpen", b =>
                {
                    b.Property<int?>("ProductId")
                        .HasColumnType("int");

                    b.Property<int?>("OpenId")
                        .HasColumnType("int");

                    b.Property<double?>("ProductItemCost")
                        .HasColumnType("double");

                    b.Property<int?>("ProductItemQty")
                        .HasColumnType("int");

                    b.HasKey("ProductId", "OpenId");

                    b.HasIndex("OpenId");

                    b.ToTable("productopens");
                });

            modelBuilder.Entity("BAR.Data.Models.ProductPrice", b =>
                {
                    b.Property<int?>("ProductId")
                        .HasColumnType("int");

                    b.Property<int?>("PriceId")
                        .HasColumnType("int");

                    b.Property<int>("AtStock")
                        .HasColumnType("int");

                    b.Property<double>("AtThisAverageCost")
                        .HasColumnType("double");

                    b.Property<double>("LatestPrice")
                        .HasColumnType("double");

                    b.Property<double>("OldPrice")
                        .HasColumnType("double");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("ProductId", "PriceId");

                    b.HasIndex("PriceId");

                    b.ToTable("productprices");
                });

            modelBuilder.Entity("BAR.Data.Models.Specs", b =>
                {
                    b.Property<int>("SpecsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<bool>("Bluetooth")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("CableLength")
                        .HasColumnType("longtext");

                    b.Property<string>("CableType")
                        .HasColumnType("longtext");

                    b.Property<string>("DisplayTypeSize")
                        .HasColumnType("longtext");

                    b.Property<bool>("MemoryCard")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Os")
                        .HasColumnType("longtext");

                    b.Property<string>("Processor")
                        .HasColumnType("longtext");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int?>("Ram")
                        .HasColumnType("int");

                    b.Property<int?>("SimCardSlots")
                        .HasColumnType("int");

                    b.Property<string>("SpecsCode")
                        .HasColumnType("longtext");

                    b.Property<string>("SpecsDescription")
                        .HasColumnType("longtext");

                    b.Property<int?>("StorageSize")
                        .HasColumnType("int");

                    b.Property<string>("StorageType")
                        .HasColumnType("longtext");

                    b.Property<bool>("WiFi")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("SpecsId");

                    b.HasIndex("ProductId")
                        .IsUnique();

                    b.ToTable("specs");
                });

            modelBuilder.Entity("BAR.Data.Models.StockAdjustment", b =>
                {
                    b.Property<int>("StockAdjustmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("DateOfIssue")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("LogId")
                        .HasColumnType("int");

                    b.Property<string>("StockAdjustmentCode")
                        .HasColumnType("longtext");

                    b.Property<string>("StockAdjustmentsReasons")
                        .HasColumnType("longtext");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("StockAdjustmentId");

                    b.HasIndex("LogId");

                    b.HasIndex("UserId");

                    b.ToTable("stockadjustments");
                });

            modelBuilder.Entity("BAR.Data.Models.StockAdjustmentProduct", b =>
                {
                    b.Property<int?>("StockAdjustmentId")
                        .HasColumnType("int");

                    b.Property<int?>("ProductId")
                        .HasColumnType("int");

                    b.Property<double>("CostAtAdjustmentTime")
                        .HasColumnType("double");

                    b.Property<int>("QtyAdjusted")
                        .HasColumnType("int");

                    b.Property<double>("RetailAtAdjustmentTime")
                        .HasColumnType("double");

                    b.Property<int>("StockAtAdjustmentTime")
                        .HasColumnType("int");

                    b.HasKey("StockAdjustmentId", "ProductId");

                    b.HasIndex("ProductId");

                    b.ToTable("stockadjustmentproducts");
                });

            modelBuilder.Entity("BAR.Data.Models.Supplier", b =>
                {
                    b.Property<int>("SupplierId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("LogId")
                        .HasColumnType("int");

                    b.Property<string>("SupplierAddress")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("SupplierCode")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("SupplierDateCreated")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("SupplierDescription")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("SupplierEmail")
                        .HasColumnType("longtext");

                    b.Property<string>("SupplierName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("SupplierPhone")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("SupplierTIN")
                        .HasColumnType("longtext");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("SupplierId");

                    b.HasIndex("LogId");

                    b.HasIndex("UserId");

                    b.ToTable("suppliers");
                });

            modelBuilder.Entity("BAR.Data.Models.Tax", b =>
                {
                    b.Property<int>("TaxId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("LogId")
                        .HasColumnType("int");

                    b.Property<string>("TaxCaption")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("TaxCode")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("TaxDateCreated")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("TaxDescription")
                        .IsRequired()
                        .HasMaxLength(600)
                        .HasColumnType("varchar(600)");

                    b.Property<double?>("TaxValue")
                        .HasColumnType("double");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("TaxId");

                    b.HasIndex("LogId");

                    b.HasIndex("UserId");

                    b.ToTable("taxes");
                });

            modelBuilder.Entity("BAR.Data.Models.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("UserAccessLevel")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("UserAddress")
                        .IsRequired()
                        .HasMaxLength(600)
                        .HasColumnType("varchar(600)");

                    b.Property<string>("UserCode")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("UserDateCreated")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("UserEmail")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)");

                    b.Property<string>("UserFirstName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("UserLastName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("UserPassword")
                        .IsRequired()
                        .HasMaxLength(18)
                        .HasColumnType("varchar(18)");

                    b.Property<string>("UserPhone")
                        .HasColumnType("longtext");

                    b.Property<string>("UserStatus")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("UserId");

                    b.ToTable("users");
                });

            modelBuilder.Entity("BAR.Data.Models.Bill", b =>
                {
                    b.HasOne("BAR.Data.Models.Log", "Log")
                        .WithMany("Bill")
                        .HasForeignKey("LogId");

                    b.HasOne("BAR.Data.Models.User", "User")
                        .WithMany("Bill")
                        .HasForeignKey("UserId");

                    b.Navigation("Log");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BAR.Data.Models.Brand", b =>
                {
                    b.HasOne("BAR.Data.Models.Log", "Log")
                        .WithMany("Brand")
                        .HasForeignKey("LogId");

                    b.HasOne("BAR.Data.Models.User", "User")
                        .WithMany("Brand")
                        .HasForeignKey("UserId");

                    b.Navigation("Log");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BAR.Data.Models.Category", b =>
                {
                    b.HasOne("BAR.Data.Models.Log", "Log")
                        .WithMany("Category")
                        .HasForeignKey("LogId");

                    b.HasOne("BAR.Data.Models.User", "User")
                        .WithMany("Category")
                        .HasForeignKey("UserId");

                    b.Navigation("Log");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BAR.Data.Models.Grn", b =>
                {
                    b.HasOne("BAR.Data.Models.Log", "Log")
                        .WithMany("Grn")
                        .HasForeignKey("LogId");

                    b.HasOne("BAR.Data.Models.Supplier", "Supplier")
                        .WithMany("Grn")
                        .HasForeignKey("SupplierId");

                    b.HasOne("BAR.Data.Models.User", "User")
                        .WithMany("Grn")
                        .HasForeignKey("UserId");

                    b.Navigation("Log");

                    b.Navigation("Supplier");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BAR.Data.Models.Hold", b =>
                {
                    b.HasOne("BAR.Data.Models.Log", "Log")
                        .WithMany("Hold")
                        .HasForeignKey("LogId");

                    b.HasOne("BAR.Data.Models.User", "User")
                        .WithMany("Hold")
                        .HasForeignKey("UserId");

                    b.Navigation("Log");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BAR.Data.Models.Log", b =>
                {
                    b.HasOne("BAR.Data.Models.User", "User")
                        .WithMany("Log")
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BAR.Data.Models.Open", b =>
                {
                    b.HasOne("BAR.Data.Models.Log", "Log")
                        .WithMany("Open")
                        .HasForeignKey("LogId");

                    b.HasOne("BAR.Data.Models.User", "User")
                        .WithMany("Open")
                        .HasForeignKey("UserId");

                    b.Navigation("Log");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BAR.Data.Models.Price", b =>
                {
                    b.HasOne("BAR.Data.Models.Log", "Log")
                        .WithMany("Price")
                        .HasForeignKey("LogId");

                    b.HasOne("BAR.Data.Models.User", "User")
                        .WithMany("Price")
                        .HasForeignKey("UserId");

                    b.Navigation("Log");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BAR.Data.Models.Product", b =>
                {
                    b.HasOne("BAR.Data.Models.Brand", "Brand")
                        .WithMany("Product")
                        .HasForeignKey("BrandId");

                    b.HasOne("BAR.Data.Models.Category", "Category")
                        .WithMany("Product")
                        .HasForeignKey("CategoryId");

                    b.HasOne("BAR.Data.Models.Log", "Log")
                        .WithMany("Product")
                        .HasForeignKey("LogId");

                    b.HasOne("BAR.Data.Models.Tax", "Tax")
                        .WithMany("Product")
                        .HasForeignKey("TaxId");

                    b.HasOne("BAR.Data.Models.User", "User")
                        .WithMany("Product")
                        .HasForeignKey("UserId");

                    b.Navigation("Brand");

                    b.Navigation("Category");

                    b.Navigation("Log");

                    b.Navigation("Tax");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BAR.Data.Models.ProductBarcode", b =>
                {
                    b.HasOne("BAR.Data.Models.Barcode", "Barcode")
                        .WithMany("ProductBarcode")
                        .HasForeignKey("BarcodeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BAR.Data.Models.Product", "Product")
                        .WithMany("ProductBarcode")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Barcode");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("BAR.Data.Models.ProductBill", b =>
                {
                    b.HasOne("BAR.Data.Models.Bill", "Bill")
                        .WithMany("ProductBill")
                        .HasForeignKey("BillId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BAR.Data.Models.Product", "Product")
                        .WithMany("ProductBill")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Bill");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("BAR.Data.Models.ProductGrn", b =>
                {
                    b.HasOne("BAR.Data.Models.Grn", "Grn")
                        .WithMany("ProductGrn")
                        .HasForeignKey("GrnId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BAR.Data.Models.Product", "Product")
                        .WithMany("ProductGrn")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Grn");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("BAR.Data.Models.ProductHold", b =>
                {
                    b.HasOne("BAR.Data.Models.Hold", "Hold")
                        .WithMany("ProductHold")
                        .HasForeignKey("HoldId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BAR.Data.Models.Product", "Product")
                        .WithMany("ProductHold")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Hold");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("BAR.Data.Models.ProductOpen", b =>
                {
                    b.HasOne("BAR.Data.Models.Open", "Open")
                        .WithMany("ProductOpen")
                        .HasForeignKey("OpenId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BAR.Data.Models.Product", "Product")
                        .WithMany("ProductOpen")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Open");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("BAR.Data.Models.ProductPrice", b =>
                {
                    b.HasOne("BAR.Data.Models.Price", "Price")
                        .WithMany("ProductPrice")
                        .HasForeignKey("PriceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BAR.Data.Models.Product", "Product")
                        .WithMany("ProductPrice")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Price");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("BAR.Data.Models.Specs", b =>
                {
                    b.HasOne("BAR.Data.Models.Product", "Product")
                        .WithOne("Specs")
                        .HasForeignKey("BAR.Data.Models.Specs", "ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("BAR.Data.Models.StockAdjustment", b =>
                {
                    b.HasOne("BAR.Data.Models.Log", "Log")
                        .WithMany("StockAdjustment")
                        .HasForeignKey("LogId");

                    b.HasOne("BAR.Data.Models.User", "User")
                        .WithMany("StockAdjustment")
                        .HasForeignKey("UserId");

                    b.Navigation("Log");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BAR.Data.Models.StockAdjustmentProduct", b =>
                {
                    b.HasOne("BAR.Data.Models.Product", "Product")
                        .WithMany("StockAdjustmentProduct")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BAR.Data.Models.StockAdjustment", "StockAdjustment")
                        .WithMany("StockAdjustmentProduct")
                        .HasForeignKey("StockAdjustmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("StockAdjustment");
                });

            modelBuilder.Entity("BAR.Data.Models.Supplier", b =>
                {
                    b.HasOne("BAR.Data.Models.Log", "Log")
                        .WithMany("Supplier")
                        .HasForeignKey("LogId");

                    b.HasOne("BAR.Data.Models.User", "User")
                        .WithMany("Supplier")
                        .HasForeignKey("UserId");

                    b.Navigation("Log");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BAR.Data.Models.Tax", b =>
                {
                    b.HasOne("BAR.Data.Models.Log", "Log")
                        .WithMany("Tax")
                        .HasForeignKey("LogId");

                    b.HasOne("BAR.Data.Models.User", "User")
                        .WithMany("Tax")
                        .HasForeignKey("UserId");

                    b.Navigation("Log");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BAR.Data.Models.Barcode", b =>
                {
                    b.Navigation("ProductBarcode");
                });

            modelBuilder.Entity("BAR.Data.Models.Bill", b =>
                {
                    b.Navigation("ProductBill");
                });

            modelBuilder.Entity("BAR.Data.Models.Brand", b =>
                {
                    b.Navigation("Product");
                });

            modelBuilder.Entity("BAR.Data.Models.Category", b =>
                {
                    b.Navigation("Product");
                });

            modelBuilder.Entity("BAR.Data.Models.Grn", b =>
                {
                    b.Navigation("ProductGrn");
                });

            modelBuilder.Entity("BAR.Data.Models.Hold", b =>
                {
                    b.Navigation("ProductHold");
                });

            modelBuilder.Entity("BAR.Data.Models.Log", b =>
                {
                    b.Navigation("Bill");

                    b.Navigation("Brand");

                    b.Navigation("Category");

                    b.Navigation("Grn");

                    b.Navigation("Hold");

                    b.Navigation("Open");

                    b.Navigation("Price");

                    b.Navigation("Product");

                    b.Navigation("StockAdjustment");

                    b.Navigation("Supplier");

                    b.Navigation("Tax");
                });

            modelBuilder.Entity("BAR.Data.Models.Open", b =>
                {
                    b.Navigation("ProductOpen");
                });

            modelBuilder.Entity("BAR.Data.Models.Price", b =>
                {
                    b.Navigation("ProductPrice");
                });

            modelBuilder.Entity("BAR.Data.Models.Product", b =>
                {
                    b.Navigation("ProductBarcode");

                    b.Navigation("ProductBill");

                    b.Navigation("ProductGrn");

                    b.Navigation("ProductHold");

                    b.Navigation("ProductOpen");

                    b.Navigation("ProductPrice");

                    b.Navigation("Specs");

                    b.Navigation("StockAdjustmentProduct");
                });

            modelBuilder.Entity("BAR.Data.Models.StockAdjustment", b =>
                {
                    b.Navigation("StockAdjustmentProduct");
                });

            modelBuilder.Entity("BAR.Data.Models.Supplier", b =>
                {
                    b.Navigation("Grn");
                });

            modelBuilder.Entity("BAR.Data.Models.Tax", b =>
                {
                    b.Navigation("Product");
                });

            modelBuilder.Entity("BAR.Data.Models.User", b =>
                {
                    b.Navigation("Bill");

                    b.Navigation("Brand");

                    b.Navigation("Category");

                    b.Navigation("Grn");

                    b.Navigation("Hold");

                    b.Navigation("Log");

                    b.Navigation("Open");

                    b.Navigation("Price");

                    b.Navigation("Product");

                    b.Navigation("StockAdjustment");

                    b.Navigation("Supplier");

                    b.Navigation("Tax");
                });
#pragma warning restore 612, 618
        }
    }
}
