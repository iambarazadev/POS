
@{
        
    if(!TheseProducts.Any()){
        
        <div class="container text-center">
            <p class="p-3  fs-4 text-unique fw-lighter">..No Product To Display!</p>
        </div>
    }
    else{
        <div class="row py-2 m-0 text-unique">
            <div class="col-1 py-2 text-center">#</div>
            <div class=" col-4 py-2 text-start text-unique">
                ID | <i class=" bi-upc-scan "></i>
            </div>
            <div class=" col-7 py-2 text-start text-unique">
                Product | Brand
            </div>
        </div>
        int index = 0;
            foreach(var item in TheseProducts){
                index +=1;
                <div class="row  py-0 px-2 bg-xs text-unique border-bottom">
                    <div class="col-1 py-3 text-center text-dark">@index</div>
                    <div class=" col-4 py-2 text-start text-unique">
                        <a class="p-0 m-0 text-unique" href="Products/Detail/@item.ProductId" style="font-size:0.8rem !important;">
                            <ul class="d-flex flex-column justify-content-start m-0 p-0">
                                <li class="text-primary">@(item.ProductCode + item.ProductId)</li>
                                <li class=" opacity-75" style="font-size:0.7rem !important; width:fit-content;">@(item.ProductBarcode.Any() ? item.ProductBarcode.FirstOrDefault().BarcodeNumber : "--:--")</li>
                            </ul>
                        </a>
                    </div>
                    <div class="col-7 py-2 text-start text-unique">
                        <NavLink class="p-0 m-0 text-unique" href="Products/Detail/1" style="font-size:0.8rem !important;">
                            <ul class="d-flex flex-column justify-content-start m-0 p-0">
                                <li class="text-capitalize">@item.ProductCaption</li>
                                <li class=" opacity-75 text-capitalize" style="font-size:0.7rem !important; width:fit-content;">@item.Brand.BrandCaption</li>
                            </ul>
                        </NavLink>
                    </div>
                    
                </div>
            }
            
        <DetailPagination 
            InnerCurrentPage=@InnerCurrentPage InnerTotalPages=@InnerTotalPages
            InnerNextPage=@InnerNextPage InnerPreviousPage=@InnerPreviousPage
        />
    }
}

@code{
    
    //  Inner Pagination 
        private int InnerTotalPages = 1;
        private int InnerCurrentPage = 1;
        private int InnerPageSize = 5 ;
        
    // Parameter
    [Parameter]
    public Category CategoryToCheck {get;set;}
    private List<Product> TheseProducts = new();
    
    protected override async Task OnInitializedAsync(){
        await base.OnInitializedAsync();
        await InnerNextPage();
    }
    
    
    private async Task InnerNextPage(){
        
        if(CategoryToCheck.Product.Any()){
            InnerTotalPages = ((int)(Math.Ceiling((double)(CategoryToCheck.Product.Count)/InnerPageSize)));
            
            if(InnerCurrentPage < InnerTotalPages ){
                InnerCurrentPage ++ ;
            }
            else{
                InnerCurrentPage = InnerTotalPages; 
            }
            
            TheseProducts = CategoryToCheck.Product
            .Skip((InnerCurrentPage - 1) * InnerPageSize)
            .Take(InnerPageSize)
            .ToList();
        }
        StateHasChanged();
    }
    
    
    private async Task InnerPreviousPage(){
        if(CategoryToCheck.Product.Any()){
            InnerTotalPages = ((int)(Math.Ceiling((double)(CategoryToCheck.Product.Count)/InnerPageSize)));
            
            if(InnerCurrentPage > 1 ){
                InnerCurrentPage -- ;
            }
            else{
                InnerCurrentPage = 1; 
            }
            
            TheseProducts = CategoryToCheck.Product
            .Skip((InnerCurrentPage - 1) * InnerPageSize)
            .Take(InnerPageSize)
            .ToList();
        }
        StateHasChanged();
    }
}

