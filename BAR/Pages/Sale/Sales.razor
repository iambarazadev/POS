@page "/Sales"

@using Microsoft.EntityFrameworkCore
@inject IDbContextFactory<BarContext> MyFactory
@inject NavigationManager Navigation

<PageTitle>Sales | @SubTitle</PageTitle>

<Options 
    Title=@Title Icon=@Icon 
    Url=@Url UrlCaption=@UrlCaption 
    CreateUrl=@CreateUrl SubTitle=@SubTitle 
    UrlCaptionIcon=@UrlCaptionIcon OptionIcon=@OptionIcon
    NextPage=@NextPage PreviousPage=@PreviousPage
    FirstPage=@FirstPage LastPage=@LastPage
    CurrentPage=@CurrentPage TotalPages=@TotalPages
    WeSale=true WeTotalCost=@WeCost WeRealStock=@WeRealStock WeTotalSale=@WeRetail
/>

<div class="row bg-white p-3" style="min-height:75vh !important;">
    <div class="col-12">
        <div class="row bg-unique shadow-sm txtshadow rounded-0 text-unique">
            <div class="col-1 text-center py-3 fw-bolder">#</div>
            <div class="col-md-2 col-3 py-3 text-start ">At Date</div>
            <div class="col-md-1 col-2 py-3 text-center">Total Bills</div>
            <div class="col-md-1 d-md-block d-none py-3 text-center">Total Items</div>
            <div class="col-md-2 d-md-block d-none py-3 text-start">Total Cost</div>
            <div class="col-md-2 col-4 py-3 text-start">Total Sales</div>
            <div class="col-md-2 d-md-block d-none py-3 text-start">Total Return</div>
            <div class="col-md-1 col-2 py-3 text-center">Action</div>
        </div>
        @{
            if(!TheseProducts.Any()){
                <div class="container text-center">
                    <p class="p-3  fs-4 text-unique fw-lighter opacity-75 text-capitalize">-- : --</p>
                </div>
            }
            else{
                foreach(var item in TheseProducts){
                    RealStock = 0;
                    RetailPrice = 0.0;
                    AsAdjStk =0;
                    AsOpenStk =0;
                    AsPurchStk = 0;
                    AsSoldStk = 0;
                    
                    AsPurchStk = (int)(item.ProductGrn.Any() ? item.ProductGrn.Sum(a => a.ProductItemQty) : 0);
                    AsOpenStk = (int)(item.ProductOpen.Any() ? item.ProductOpen.Sum(a => a.ProductItemQty) : 0);
                    AsAdjStk = (int)(item.StockAdjustmentProduct.Any() ? item.StockAdjustmentProduct.Sum(b => b.QtyAdjusted) : 0);
                    AsSoldStk = (int)(item.ProductBill.Any() ? item.ProductBill.Sum(a => a.QtyPurchased) : 0);
                    
                    RealStock = (int)((AsOpenStk + AsPurchStk + AsAdjStk) - (AsSoldStk));
                    RetailPrice = item.ProductPrice.Any() ? item.ProductPrice.LastOrDefault().LatestPrice : 0.0;
                    
                    if(RealStock == 0){
                        Colours = "text-success";
                    }else if(RealStock < 0){
                        Colours = "text-danger";
                    }else{
                        Colours = "";
                    }
                    
                    <div class="row rounded-0 mt-0 text-unique border-bottom">
                        <div class="col-1 text-center py-2 txtshadow">@(item.ProductId)</div>
                        <div class="col-md-2 col-3 py-1 text-start">
                            <a class="p-0 m-0" href="Sale/BillWise">
                                <ul class="p-0 m-0 d-flex flex-column text-start">
                                    <li class="p-0 m-0 text-primary">@((DateTime.Now).ToString("dd MMM yy"))</li>
                                    <li class="rounded-3 m-0 opacity-75" style="font-size:0.8rem !important; width:fit-content;">@((DateTime.Now).ToString("dddd"))</li>
                                </ul>
                            </a>
                        </div>
                        <div class="col-md-1 col-2 py-2 text-center">
                           10
                        </div>
                        <div class="col-md-1 d-none d-md-block py-2 text-center">
                            40
                        </div>
                        <div class="col-md-2 d-md-block d-none py-2 text-start text-capitalize">
                            1,200,000
                        </div>
                        <div class="col-md-2 col-4 py-2 text-start text-capitalize">
                            2,400,000
                        </div>
                        <div class="col-md-2 d-md-block d-none py-2 text-start text-capitalize">
                            1,200,000
                        </div>
                        <div class="col-md-1 col-2 py-2 px-0 text-center" style="padding-top:0.8rem !important;">
                            <a href="Sale/BillWise" class=" text-primary px-md-3 px-2 py-1 border border-2" style="width:fit-content; margin:1px auto;">View</a>
                        </div>
                    </div>
                }
            }
        }
    </div>
</div>


@code{
    //  Options Variables
        public string Title = "Sales";
        public string SubTitle = "List view";
        public string Icon = "stack";
        public string OptionIcon = "view-stacked";
        public string Url = "Sale/BillWise";
        public string UrlCaption = "Detail View";
        public string UrlCaptionIcon = "ui-checks-grid";
        public string CreateUrl = "Sale/Create";
        
    //  Data Variables
        private List<Product> TheseProducts = new();
        private List<Product> WeProducts = new();
        private double WeCost = 0.0;
        private double WeRetail = 0.0;
        private int WeRealStock = 0;
        private int CurrentPage = 0;
        private int PageSize = 9;
        private int TotalPages = 1;
        private int RealStock = 0;
        private double RetailPrice = 0.0;
        private string Colours = "";
        private int AsOpenStk = 0;
        private int AsAdjStk = 0;
        private int AsSoldStk = 0;
        private int AsPurchStk = 0;
        
        protected override async Task OnInitializedAsync(){
            await base.OnInitializedAsync();
            await NextPage();
        }
    
    private async Task NextPage(){
        using(var repo = new UnitOfWork(MyFactory.CreateDbContext())){
            
            double Num = (double)(repo.Products.GetNoRecords())/PageSize;
            TotalPages = (int)(Math.Ceiling(Num));
            
            if(CurrentPage < TotalPages ){
               CurrentPage ++ ;
            }
            else{
                CurrentPage = TotalPages; 
            }
            
            TheseProducts = await repo.Products.GetAllProductsDetailedAsync(CurrentPage, PageSize);
            
            await repo.CompleteAsync();
            repo.Dispose(); 
        }
        
        StateHasChanged();
        await EntireStock();
    }
    
    private async Task PreviousPage(){
        using(var repo = new UnitOfWork(MyFactory.CreateDbContext())){
            
            double Num = (double)(repo.Products.GetNoRecords())/PageSize;
            TotalPages = (int)(Math.Ceiling(Num));
            
            if(CurrentPage > 1 ){
               CurrentPage -- ;
            }
            else{
                CurrentPage = 1; 
            }
            
            TheseProducts = await repo.Products.GetAllProductsDetailedAsync(CurrentPage, PageSize);
            
            await repo.CompleteAsync();
            repo.Dispose(); 
        }
        
        StateHasChanged();
        await EntireStock();
    }
    
    private async Task FirstPage(){
        using(var repo = new UnitOfWork(MyFactory.CreateDbContext())){
            
            double Num = (double)(repo.Products.GetNoRecords())/PageSize;
            TotalPages = (int)(Math.Ceiling(Num));
            CurrentPage = 1; 
            TheseProducts = await repo.Products.GetAllProductsDetailedAsync(CurrentPage, PageSize);
            
            await repo.CompleteAsync();
            repo.Dispose(); 
        }
        
        StateHasChanged();
        await EntireStock();
    }
    
    private async Task LastPage(){
        using(var repo = new UnitOfWork(MyFactory.CreateDbContext())){
            
            double Num = (double)(repo.Products.GetNoRecords())/PageSize;
            TotalPages = (int)(Math.Ceiling(Num));
            CurrentPage = TotalPages; 
            TheseProducts = await repo.Products.GetAllProductsDetailedAsync(CurrentPage, PageSize);
            
            await repo.CompleteAsync();
            repo.Dispose(); 
        }
        
        StateHasChanged();
        await EntireStock();
    }  
    
    private async Task EntireStock(){
        WeCost = 0.0;
        WeRealStock = 0;
        WeRetail = 0.0;
        using(var repo = new UnitOfWork(MyFactory.CreateDbContext())){
            
            WeProducts = await repo.Products.GetAllProductsDetailedAsync(1, repo.Products.GetNoRecords());
            
            foreach(var item in WeProducts){
                var IAsPurchStk = (int)(item.ProductGrn.Any() ? item.ProductGrn.Sum(a => a.ProductItemQty) : 0);
                var IAsOpenStk = (int)(item.ProductOpen.Any() ? item.ProductOpen.Sum(a => a.ProductItemQty) : 0);
                var IAsAdjStk = (int)(item.StockAdjustmentProduct.Any() ? item.StockAdjustmentProduct.Sum(b => b.QtyAdjusted) : 0);
                var IAsSoldStk = (int)(item.ProductBill.Any() ? item.ProductBill.Sum(a => a.QtyPurchased) : 0);
                
                var IRealStock = (int)((IAsOpenStk + IAsPurchStk + IAsAdjStk) - (IAsSoldStk));
                var IRetailPrice = item.ProductPrice.Any() ? item.ProductPrice.LastOrDefault().LatestPrice : 0.0;
                
                if(item.ProductGrn.Any()){
                    var ICost = (double)(item.ProductGrn.LastOrDefault().ProductItemCost);
                    WeCost += (ICost * IRealStock);
                }else{
                    var ICost = (double)(item.ProductOpen.Any() ? item.ProductOpen.LastOrDefault().ProductItemCost : 0.0);
                    WeCost += (ICost * IRealStock);
                }
                
                WeRealStock += (IRealStock);
                WeRetail += (IRetailPrice * IRealStock);
            }
            
            await repo.CompleteAsync();
            repo.Dispose(); 
        }
    }
}