@using Microsoft.EntityFrameworkCore
@inject IDbContextFactory<BarContext> MyFactory

<div class="row py-0 text-unique text-start">
    <div class="col-1 py-2 text-center">#</div>
    <div class="col-md-2 col-3 py-1 text-start text-unique">
       <ul class="d-flex flex-column m-0 p-0">
            <li>PRC</li>
            <li class=" p-0 opacity-75" style="font-size:0.7rem !important; ">Responsible</li>
        </ul>
    </div>
    <div class="col-lg-2 col-3 py-1 text-start text-unique">
        <ul class="d-flex flex-column m-0 p-0">
            <li>Price</li>
            <li class=" p-0 opacity-75" style="font-size:0.7rem !important; ">Old</li>
        </ul>
    </div>
    <div class="col-lg-2 py-1 text-start text-unique d-none d-lg-block">
        <ul class="d-flex flex-column m-0 p-0">
            <li>Price</li>
            <li class=" p-0 opacity-75" style="font-size:0.7rem !important; ">Variance</li>
        </ul>
    </div>
    <div class="col-lg-2 col-3 py-1 text-start text-unique">
        <ul class="d-flex flex-column m-0 p-0">
            <li>Price</li>
            <li class=" p-0 opacity-75" style="font-size:0.7rem !important; ">Latest</li>
        </ul>
    </div>
    <div class="col-md-3 col-2 py-1 text-start text-unique">
        <ul class="d-flex flex-column m-0 p-0">
            <li>Date</li>
            <li class=" p-0 opacity-75" style="font-size:0.7rem !important;">Day & Time</li>
        </ul>
    </div>
</div>
@{
    if(!TheseProductPrices.Any()){
        <div class="container text-center">
            <p class="p-3  fs-4 text-unique fw-lighter">..No Price Adjustments info.</p>
        </div>
    }
    else{
        foreach(var item in TheseProductPrices){
            LatestPrice = item.LatestPrice;
            OldPrice = item.OldPrice;
            Variance = LatestPrice - OldPrice;
            Colors = Variance < 1 ? "text-danger" : "text-success"; 
            
            if(LatestPrice != OldPrice){
                <div class="row bg-xs border-bottom py-0 text-unique">
                    <div class="col-1 py-2 text-center">
                        @(ProductToCheck.ProductPrice.IndexOf(item)+1)
                    </div>
                    <div class="col-md-2 col-3 py-2 text-start text-primary">
                        <ul class="d-flex flex-column  m-0 p-0" style="font-size:0.8rem;">
                            <li class="opacity-75" style="font-size:0.8rem !important;">@(item.Price.PriceCode + item.Price.PriceId)</li>
                            <li class=" opacity-75 text-unique" style="font-size:0.7rem !important; ">@(item.Price.User.UserFirstName.Length > 9 ? item.Price.User.UserFirstName.Substring(0,7) + " .." : item.Price.User.UserFirstName)</li>
                        </ul>
                    </div>
                    <div class="col-lg-2 col-3 py-2 text-start text-unique opacity-75">
                        @OldPrice.ToString("n0")
                    </div>
                    <div class="col-lg-2 py-2 text-start @Colors d-none d-lg-block opacity-75">
                        @((Variance > 0 ? "+":""))@(Variance.ToString("n0")) 
                    </div>
                    <div class="col-lg-2 col-3 py-2 text-start text-primary opacity-75">
                        @LatestPrice.ToString("n0")
                    </div>
                    <div class="col-md-3 col-2 py-2 pe-0 text-start text-unique">
                        <ul class="d-flex flex-column  m-0 p-0">
                            <li style="font-size:0.8rem !important;">@item.Price.DateOfIssue.ToString("dd MMM yy")</li>
                            <li class=" opacity-75 d-none d-sm-block " style="font-size:0.7rem !important; ">@item.Price.DateOfIssue.ToString("ddd hh : mm")</li>
                        </ul>
                    </div>
                </div>
            }
        }
        <DetailPagination 
            InnerCurrentPage=@InnerCurrentPage InnerTotalPages=@InnerTotalPages
            InnerNextPage=@InnerNextPage InnerPreviousPage=@InnerPreviousPage
        />
    }
}


@code{
    
    //  Inner Pagination 
    private int InnerTotalPages = 1;
    private int InnerCurrentPage = 1;
    private int InnerPageSize = 7 ;
    
    [Parameter]
    public Product ProductToCheck {get;set;}
    private List<ProductPrice> TheseProductPrices = new();
    private double OldPrice = 0.0;
    private double LatestPrice = 0.0;
    private double Variance = 0.0;
    private string Colors = "";
    
    protected override async Task OnInitializedAsync(){
        await base.OnInitializedAsync();  
        InnerNextPage();
    }
    
    private async Task InnerNextPage(){
        TheseProductPrices = new();
        if(ProductToCheck.ProductPrice.Any()){
            double Num = 
            InnerTotalPages = ((int)(Math.Ceiling((double)(ProductToCheck.ProductPrice.Count)/InnerPageSize)));
            
            if(InnerCurrentPage < InnerTotalPages ){
                InnerCurrentPage ++ ;
            }
            else{
                InnerCurrentPage = InnerTotalPages; 
            }
            
            TheseProductPrices = ProductToCheck.ProductPrice
            .Skip((InnerCurrentPage - 1) * InnerPageSize)
            .Take(InnerPageSize)
            .ToList();
        }
    }
    
    private async Task InnerPreviousPage(){
        TheseProductPrices = new();
        if(ProductToCheck.ProductPrice.Any()){
            InnerTotalPages = ((int)(Math.Ceiling((double)(ProductToCheck.ProductPrice.Count)/InnerPageSize)));
            
            if(InnerCurrentPage > 1 ){
                InnerCurrentPage -- ;
            }
            else{
                InnerCurrentPage = 1; 
            }
            
            TheseProductPrices = ProductToCheck.ProductPrice
            .Skip((InnerCurrentPage - 1) * InnerPageSize)
            .Take(InnerPageSize)
            .ToList();
        }
    }
}