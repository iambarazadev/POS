@page "/Prices/Detail/{Sn:int}"

@using Microsoft.EntityFrameworkCore
@inject IDbContextFactory<BarContext> MyFactory
@inject NavigationManager Navigation

<PageTitle>Prices | @SubTitle</PageTitle>

<Options 
    Title=@Title Icon=@Icon 
    Url=@Url UrlCaption=@UrlCaption 
    CreateUrl=@CreateUrl SubTitle=@SubTitle 
    UrlCaptionIcon=@UrlCaptionIcon OptionIcon=@OptionIcon
    NextPage=@NextPage PreviousPage=@PreviousPage
    FirstPage=@FirstPage LastPage=@LastPage
    CurrentPage=@CurrentPage TotalPages=@TotalPages SinglePrice=true RealPrc=@ThisPrice.PriceId
/>



@{
    if(ThisPrice.PriceId < 1){
       <div class="container text-center">
            <p class="p-3  fs-4 text-primary bg-blue text-cente" style="margin:1px auto; width:fit-content;">..No Price Adjustment Yest</p>
        </div>
    }
    else{

        <div class="row bg-white p-3" style="min-height:75vh !important;">
            <div class="col-12">
                <div class="row p-0">
                    <div class="col-md-4 col-12 text-start p-0">
                        <ul class="d-flex flex-column justify-content-start p-0">
                            <li>Price Adjustment info</li>
                            <li class=" m-0 opacity-75 " style="font-size:0.8rem !important; width:fit-content;"> Code : @(ThisPrice.PriceCode + ThisPrice.PriceId)</li>
                            <li class=" m-0 opacity-75 " style="font-size:0.8rem !important; width:fit-content;"> Date : @(ThisPrice.DateOfIssue.ToString("ddd, dd MMM yy, hh : mm"))</li>
                        </ul>
                    </div>
                    <div class="col-md-4 col-12 text-start p-0">
                        <ul class="d-flex flex-column justify-content-start p-0">
                            <li>Price High OR Down</li>
                            <li class=" m-0 opacity-75 text-success " style="font-size:0.8rem !important; width:fit-content;"> Price Rise : @ThisPrice.ProductPrice.Where(a => (a.OldPrice - a.LatestPrice) < 0).ToList().Count</li>
                            <li class=" m-0 opacity-75 text-danger " style="font-size:0.8rem !important; width:fit-content;"> Price Down : @ThisPrice.ProductPrice.Where(a => (a.OldPrice - a.LatestPrice) > 0).ToList().Count</li>
                        </ul>
                    </div>
                    <div class="col-md-4 col-12 text-start p-0">
                        <ul class="d-flex flex-column justify-content-start p-0">
                            <li>Reason</li>
                            <li class=" m-0 opacity-75 " style="font-size:0.8rem !important; width:fit-content;"><i class=" bi-person-fill"></i> @ThisPrice.User.UserFirstName, @ThisPrice.User.UserAccessLevel</li>
                            <li class=" m-0 opacity-75 " style="font-size:0.8rem !important; width:fit-content;">
                                : @ThisPrice.PriceReason 
                                @{
                                    if(ThisPrice.ProductPrice.Any()){
                                        Status = ThisPrice.ProductPrice.FirstOrDefault().Status.Length > 2 ? $" # CODE : {ThisPrice.ProductPrice.FirstOrDefault().Status}" : "";
                                    }
                                }
                                @Status
                            </li>
                        </ul>
                    </div>
                </div>
                <div class="row">
                    <div class="col-12">
                        <div class="row text-white  shadow-sm txtshadow bg-unique">
                            <div class="col-1 text-center py-3 fw-bolder">#</div>
                            <div class="col-md-2 col-5 py-3 text-start">Product</div>
                            <div class="col-md-2 col-3 py-3 text-start ">PriceBefore</div>
                            <div class="col-md-2 d-none d-md-block py-3 text-start ">Variance</div>
                            <div class="col-md-2 col-3 py-3 text-start">NewPrice</div>
                            <div class="col-md-2 d-none d-md-block py-3  text-start">AtCostOf</div>
                            <div class="col-md-1 d-none d-md-block py-3  text-center">AtStock</div>
                        </div>
                        @*Dynamic component adjust list*@
                            @{
                                if(this.ThisPrice.ProductPrice != null && this.ThisPrice.ProductPrice.Count > 0){
                                        <InPriceDetail PriceToCheck=@ThisPrice />
                                    }
                                else{
                                    <p class="fs-6 text-center text-primary py-3 px-5  bg-blue opacity-75 my-3 border border-0" style="width:fit-content; margin:1px auto;">No PriceProducts info</p>
                                    ThisPrice.ProductPrice = new();
                                }
                            }
                        @*end of dynamics*@
                    </div>
                </div>
            </div>
        </div>
    }
}


@code{
    [Parameter]
    public int Sn{get;set;}
    public string Title = "Prices";
    public string SubTitle = "Detail view";
    public string Icon = "tag";
    public string Url = "Prices";
    public string UrlCaption = "List View";
    public string UrlCaptionIcon = "view-stacked";
    public string OptionIcon = "ui-checks-grid";
    public string CreateUrl = "Prices/Create";
    
    //  Pagination 
    private int TotalPages = 1;
    private int CurrentPage = 1;
    private int PageSize = 1 ;
    
    // Data Variables
    private Price ThisPrice = new();
    private double PriceVarianceBefore = 0.0;
    private string Status = "";
    
    protected override async Task OnInitializedAsync(){
        await base.OnInitializedAsync();
        ThisPrice.ProductPrice = new();
        await Start(Sn);
    }
    
    private async Task Start(int cid = 0){
        ThisPrice.ProductPrice = new();
        using(var repo = new UnitOfWork(MyFactory.CreateDbContext())){
            TotalPages = repo.Prices.GetNoRecords();
            
            if(cid < 1 && TotalPages > 0){
                ThisPrice = (await repo.Prices.GetAllPricesDetailedAsync(1,1)).SingleOrDefault();
                CurrentPage = (repo.Prices.GetIndexOf(ThisPrice) + 1 );
            }
            else if(cid > 0 && cid <= TotalPages){
                ThisPrice = await repo.Prices.GetDetailedPriceAsync(cid);
                CurrentPage = (repo.Prices.GetIndexOf(ThisPrice) + 1 );
            }
            else{
                ThisPrice = new();
                ThisPrice.ProductPrice = new();
            }
            
            await repo.CompleteAsync();
            repo.Dispose(); 
        }
        
        StateHasChanged();
    }
    
    private async Task NextPage(){
        
        ThisPrice.ProductPrice = new();
        using(var repo = new UnitOfWork(MyFactory.CreateDbContext())){
            TotalPages = repo.Prices.GetNoRecords();
            
            if(CurrentPage < TotalPages ){
                CurrentPage ++ ;
            }
            else{
                CurrentPage = TotalPages; 
            }
            
            ThisPrice = (await repo.Prices.GetAllPricesDetailedAsync(CurrentPage, PageSize)).SingleOrDefault();
            
            await repo.CompleteAsync();
            repo.Dispose(); 
        }
    }
    
    private async Task PreviousPage(){
        ThisPrice.ProductPrice = new();
        using(var repo = new UnitOfWork(MyFactory.CreateDbContext())){
            TotalPages = repo.Prices.GetNoRecords();
            
            if(CurrentPage > 1 ){
                CurrentPage -- ;
            }
            else{
                CurrentPage = 1; 
            }
            
            ThisPrice = (await repo.Prices.GetAllPricesDetailedAsync(CurrentPage, PageSize)).SingleOrDefault();
            
            await repo.CompleteAsync();
            repo.Dispose(); 
        }
    }
    
    private async Task FirstPage(){
        ThisPrice.ProductPrice = new();
        using(var repo = new UnitOfWork(MyFactory.CreateDbContext())){
            TotalPages = repo.Prices.GetNoRecords();
            
            CurrentPage = 1; 
            
            ThisPrice = (await repo.Prices.GetAllPricesDetailedAsync(CurrentPage, PageSize)).SingleOrDefault();
            
            await repo.CompleteAsync();
            repo.Dispose(); 
        }
    }
    
    private async Task LastPage(){
        ThisPrice.ProductPrice = new();
        using(var repo = new UnitOfWork(MyFactory.CreateDbContext())){
            TotalPages = repo.Prices.GetNoRecords();
            
            CurrentPage = TotalPages; 
            
            ThisPrice = (await repo.Prices.GetAllPricesDetailedAsync(CurrentPage, PageSize)).SingleOrDefault();
            
            await repo.CompleteAsync();
            repo.Dispose(); 
        }
    }
}
