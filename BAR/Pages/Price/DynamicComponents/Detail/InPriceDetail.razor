@using Microsoft.EntityFrameworkCore
@inject IDbContextFactory<BarContext> MyFactory
@inject NavigationManager Navigation

@{  
    int index = 0;
    foreach(var item in TheseProductPrices){
        index +=1;
        PriceVariance = 0.0;
        PriceVariance = item.OldPrice - item.LatestPrice ;
        Colouring = (PriceVariance) < 1 ? "text-success" : "text-danger";
        <div class="row bg-xs text-unique border-bottom">
            <div class="col-1 text-center py-2 fw-bolder">@index</div>
            <div class="col-md-2 col-5 py-1 text-start">
                <a class="p-0 m-0" href="Products/Detail/@item.Product.ProductId">
                    <ul class="d-flex flex-column justify-content-start p-0 m-0 text-capitalize">
                        <li class="text-primary">@(item.Product.ProductCaption.Length > 14 ? item.Product.ProductCaption.Substring(0,11) + " .." : item.Product.ProductCaption)</li>
                        <li class=" m-0 opacity-75 " style="font-size:0.7rem !important; width:fit-content;">@(item.Product.ProductCode + item.Product.ProductId)</li>
                    </ul>
                </a>
            </div>
            <div class="col-md-2 col-3 py-2 text-start ">
                @item.OldPrice.ToString("n0")
            </div>
            <div class="col-md-2 py-2 d-none d-md-block text-start @Colouring ">
                @(((-1 * PriceVariance) == 0 ? 0 : (-1 * PriceVariance)).ToString("n0"))
            </div>
            <div class="col-md-2 col-3  py-2 text-start text-primary">
              @item.LatestPrice.ToString("n0")
            </div>
            <div class="col-md-2 d-none d-md-block py-2  text-start">
               @item.AtThisAverageCost.ToString("n0")
            </div>
            <div class="col-md-1 d-none d-md-block py-2  text-center">
               @item.AtStock
            </div>
        </div>
    }
    <DetailPagination 
        InnerCurrentPage=@InnerCurrentPage InnerTotalPages=@InnerTotalPages
        InnerNextPage=@InnerNextPage InnerPreviousPage=@InnerPreviousPage
    />
}


@code{
    
    //  Inner Pagination 
    private int InnerTotalPages = 1;
    private int InnerCurrentPage = 1;
    private int InnerPageSize = 5 ;
        
    // Parameter
    [Parameter]
    public Price PriceToCheck {get;set;}
    private List<ProductPrice> TheseProductPrices = new();
    private string Colouring = "text-success";
    private double PriceVariance = 0.0;
    
    protected override async Task OnInitializedAsync(){
        await base.OnInitializedAsync();
        await InnerNextPage();
        StateHasChanged();
    }
    
    private async Task InnerNextPage(){
        
        if(PriceToCheck.ProductPrice.Any()){
            InnerTotalPages = ((int)(Math.Ceiling((double)(PriceToCheck.ProductPrice.Count)/InnerPageSize)));
            
            if(InnerCurrentPage < InnerTotalPages ){
                InnerCurrentPage ++ ;
            }
            else{
                InnerCurrentPage = InnerTotalPages; 
            }
            
            TheseProductPrices = PriceToCheck.ProductPrice
            .Skip((InnerCurrentPage - 1) * InnerPageSize)
            .Take(InnerPageSize)
            .ToList();
        }
        else{
            PriceToCheck.ProductPrice = new();
        }
        StateHasChanged();
    }
    
    private async Task InnerPreviousPage(){
        if(PriceToCheck.ProductPrice.Any()){
            InnerTotalPages = ((int)(Math.Ceiling((double)(PriceToCheck.ProductPrice.Count)/InnerPageSize)));
            
            if(InnerCurrentPage > 1 ){
                InnerCurrentPage -- ;
            }
            else{
                InnerCurrentPage = 1; 
            }
            
            TheseProductPrices = PriceToCheck.ProductPrice
            .Skip((InnerCurrentPage - 1) * InnerPageSize)
            .Take(InnerPageSize)
            .ToList();
        }
        else{
            PriceToCheck.ProductPrice = new();
        }
        StateHasChanged();
    }
}
