@page "/Adjustments"


@using Microsoft.EntityFrameworkCore
@inject IDbContextFactory<BarContext> MyFactory
@inject NavigationManager Navigation

<PageTitle>Adjustments | @SubTitle</PageTitle>

<Options 
    Title=@Title Icon=@Icon 
    Url=@Url UrlCaption=@UrlCaption 
    CreateUrl=@CreateUrl SubTitle=@SubTitle 
    UrlCaptionIcon=@UrlCaptionIcon OptionIcon=@OptionIcon
    NextPage=@NextPage PreviousPage=@PreviousPage
    FirstPage=@FirstPage LastPage=@LastPage
    CurrentPage=@CurrentPage TotalPages=@TotalPages
/>

<div class="row bg-white p-3" style="min-height:75vh !important;">
    <div class="col-12 mb-2">
        <div class="row text-white shadow-sm txtshadow  bg-unique">
            <div class="col-1 text-center py-3 fw-bolder">#</div>
            <div class="col-md-2 col-3 py-3 text-start">Adjust Id</div>
            <div class="col-md-1 col-2 py-3 text-center">Items</div>
            <div class="col-lg-1 col-md-2 col-3 py-3 text-center">Pcs</div>
            <div class="col-lg-2 col-3 py-3 text-start">Cost</div>
            <div class="d-none d-lg-block col-lg-3 col-5 py-3 text-md-start text-start">Reason</div>
            <div class="col-lg-2 col-md-3 d-none d-md-block py-3 text-start">By</div>
        </div>
        @{
            if(!TheseStockAdjustments.Any()){
                <div class="container text-center">
                    <p class="p-3  fs-4 text-unique fw-lighter opacity-75 text-capitalize">-- : --</p>
                </div>
            }
            else{
                    
                foreach(var item in TheseStockAdjustments){
                    UpQtyCost = 0.0;
                    DownQtyCost = 0.0;
                    foreach(var xitem in item.StockAdjustmentProduct){
                        if(xitem.QtyAdjusted > 0){
                            UpQtyCost += (double)(xitem.QtyAdjusted * (xitem.CostAtAdjustmentTime));
                        }
                        if(xitem.QtyAdjusted < 0){
                            DownQtyCost += (double)(xitem.QtyAdjusted * (xitem.CostAtAdjustmentTime));
                        }
                    }
                    <div class="row text-unique border-bottom">
                        <div class="col-1 text-center py-2 ">@(TheseStockAdjustments.IndexOf(item) + 1)</div>
                        <div class="col-md-2 col-3 py-1 text-start">
                            <a href="Adjustments/Detail/@item.StockAdjustmentId" class="p-0 m-0">
                                <ul class="p-0 m-0 d-flex flex-column text-center">
                                    <li class="p-0 m-0 text-start text-primary">@(item.StockAdjustmentCode + item.StockAdjustmentId)</li>
                                    <li class=" m-0 opacity-75 d-none d-lg-block " style="font-size:0.8rem !important; width:fit-content;">@(item.DateOfIssue.ToString("ddd, dd MMM yy"))</li>
                                    <li class=" m-0 opacity-75 d-lg-none " style="font-size:0.8rem !important; width:fit-content;">@(item.DateOfIssue.ToString("dd MMM yy"))</li>
                                </ul>
                            </a>
                        </div>
                        <div class="col-md-1 col-2 py-2 text-center">@item.StockAdjustmentProduct.Count</div>
                        <div class="col-lg-1 col-md-2 col-3 py-1 text-center ">
                            <ul class="p-0 m-0 text-center opacity-75">
                                <li class="p-0 m-0 text-center  text-success">@item.StockAdjustmentProduct.Where(x => x.QtyAdjusted > 0).Sum(x => x.QtyAdjusted) </li>
                                <li class=" text-center m-0 opacity-75 text-danger " style="font-size:0.8rem !important;">@(item.StockAdjustmentProduct.Where(x => x.QtyAdjusted < 0).Sum(x => x.QtyAdjusted) * -1)</li>
                            </ul>
                        </div>
                        <div class="col-lg-2 col-3 py-1 text-unique text-md-start text-center">
                            <ul class="p-0 m-0 d-flex flex-column text-center opacity-75">
                                <li class="p-0 m-0 text-start text-success">@UpQtyCost.ToString("n0")</li>
                                <li class=" m-0 opacity-75 text-danger " style="font-size:0.8rem !important; width:fit-content;">@((DownQtyCost < 0 ? -1 * DownQtyCost : 0).ToString("n0"))</li>
                            </ul>
                        </div>
                        <div class="col-lg-3 d-none d-lg-block text-start py-2 text-capitalize "style="font-size:0.8rem !important;">@(item.StockAdjustmentsReasons.Length > 30 ? item.StockAdjustmentsReasons.Substring(0,28) + " .." : item.StockAdjustmentsReasons)</div>
                        <div class="col-lg-2 col-md-3 d-none d-md-block py-1 text-unique text-start">
                            <ul class="p-0 m-0 d-flex flex-column text-center">
                                <li class="p-0 m-0 text-start text-unique text-capitalize">@item.User.UserFirstName, @item.User.UserLastName</li>
                                <li class=" m-0 opacity-75 text-capitalize" style="font-size:0.8rem !important; width:fit-content;">@item.User.UserAccessLevel</li>
                            </ul>
                        </div>
                    </div>
                }
            }
        }
    </div>
</div>

@code{
    public string Title = "Stock";
    public string Icon = "toggles2";
    public string OptionIcon = "view-stacked";
    public string SubTitle = "List view";
    public string Url = "Adjustments/Detail/0";
    public string UrlCaption = "Detail View";
    public string UrlCaptionIcon = "ui-checks-grid";
    public string CreateUrl = "Adjustments/Create";

    // Data Variables
    private List<StockAdjustment> TheseStockAdjustments = new();
    private int CurrentPage = 0;
    private int PageSize = 7;
    private int TotalPages = 1;
    private double UpQtyCost = 0.0;
    private double DownQtyCost = 0.0;
    
    protected override async Task OnInitializedAsync(){
        
        await base.OnInitializedAsync();
        await NextPage();
    }
    
    private async Task NextPage(){
        using(var repo = new UnitOfWork(MyFactory.CreateDbContext())){
            
            double Num = (double)(repo.StockAdjustments.GetNoRecords())/PageSize;
            TotalPages = (int)(Math.Ceiling(Num));
            
            if(CurrentPage < TotalPages ){
               CurrentPage ++ ;
            }
            else{
                CurrentPage = TotalPages; 
            }
            
            TheseStockAdjustments = await repo.StockAdjustments.GetAllStockAdjustmentsDetailedAsync(CurrentPage, PageSize);
            
            await repo.CompleteAsync();
            repo.Dispose(); 
        }
        
        StateHasChanged();
    }
    
    private async Task PreviousPage(){
        using(var repo = new UnitOfWork(MyFactory.CreateDbContext())){
            
            double Num = (double)(repo.StockAdjustments.GetNoRecords())/PageSize;
            TotalPages = (int)(Math.Ceiling(Num));
            
            if(CurrentPage > 1 ){
               CurrentPage -- ;
            }
            else{
                CurrentPage = 1; 
            }
            
            TheseStockAdjustments = await repo.StockAdjustments.GetAllStockAdjustmentsDetailedAsync(CurrentPage, PageSize);
            
            await repo.CompleteAsync();
            repo.Dispose(); 
        }
        
        StateHasChanged();
    }
    
    private async Task FirstPage(){
        using(var repo = new UnitOfWork(MyFactory.CreateDbContext())){
            
            double Num = (double)(repo.StockAdjustments.GetNoRecords())/PageSize;
            TotalPages = (int)(Math.Ceiling(Num));
            
            CurrentPage = 1;
            
            TheseStockAdjustments = await repo.StockAdjustments.GetAllStockAdjustmentsDetailedAsync(CurrentPage, PageSize);
            
            await repo.CompleteAsync();
            repo.Dispose(); 
        }
        
        StateHasChanged();
    }
    
    private async Task LastPage(){
        using(var repo = new UnitOfWork(MyFactory.CreateDbContext())){
            
            double Num = (double)(repo.StockAdjustments.GetNoRecords())/PageSize;
            TotalPages = (int)(Math.Ceiling(Num));
            
            CurrentPage = TotalPages;
            
            TheseStockAdjustments = await repo.StockAdjustments.GetAllStockAdjustmentsDetailedAsync(CurrentPage, PageSize);
            
            await repo.CompleteAsync();
            repo.Dispose(); 
        }
        
        StateHasChanged();
    }
}