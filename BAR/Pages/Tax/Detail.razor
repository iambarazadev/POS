@page "/Taxes/Detail/{Sn:int}"

@using Microsoft.EntityFrameworkCore
@inject IDbContextFactory<BarContext> MyFactory
@inject NavigationManager Navigation

<PageTitle>Tax| Detail view</PageTitle>

<Options 
    Title=@Title Icon=@Icon Url=@Url UrlCaption=@UrlCaption 
    CreateUrl=@CreateUrl SubTitle=@SubTitle UrlCaptionIcon=@UrlCaptionIcon 
    OptionIcon=@OptionIcon
    NextPage=@NextPage CurrentPage=@CurrentPage TotalPages=@TotalPages
    PreviousPage=@PreviousPage FirstPage=@FirstPage LastPage=@LastPage
    EditUrl=@EditUrl FungaEdit=@FungaEdit SingleTax=true RealTx=@ThisTax.TaxId
/>
 
@{
    if(ThisTax.TaxId < 1){
        <div class="container text-center">
            <p class="p-3  fs-4 text-unique fw-lighter">..No Tax To Display!</p>
        </div>
    }
    else{
        <div class="row bg-white p-3" style="min-height:75vh !important;">
            <div class="col-12 col-md-5">
                <div class="row text-start ">
                    <div class=" col-lg-3 col-2 p-0 text-unique rounded-start">
                        <ul class="d-flex flex-row shadow-sm txtshadow  px-3 py-2 bg-unique text-white m-0 mt-1" style="width:fit-content;">
                            <li class="p-0 m-0 me-lg-2"><i class="fs-6 bi-at text-white"></i></li>
                            <li class="p-0 m-0 d-none d-lg-block "> Tax</li>
                        </ul>
                    </div>
                    <div class=" col-lg-9 col-10  rounded-end text-start">
                        <p class=" p-2 border border-2 text-unique m-0 mt-1 text-capitalize" style="width:fit-content;">@ThisTax.TaxCaption</p>
                    </div>
                </div>
                <div class="row text-start ">
                    <div class=" col-lg-3 col-2 p-0 text-unique rounded-start">
                        <ul class="d-flex flex-row shadow-sm txtshadow  px-3 py-2 bg-unique text-white m-0 mt-1" style="width:fit-content;">
                            <li class="p-0 m-0 me-lg-2">%</li>
                            <li class="p-0 m-0 d-none d-lg-block "> Percentage</li>
                        </ul>
                    </div>
                    <div class=" col-lg-9 col-10  rounded-end text-start">
                        <p class=" p-2 border border-2 text-unique m-0 mt-1 text-capitalize" style="width:fit-content;">@(ThisTax.TaxValue)%</p>
                    </div>
                </div>
                <div class="row text-start ">
                    <div class=" col-lg-3 col-2 p-0 text-unique rounded-start">
                        <ul class="d-flex flex-row shadow-sm txtshadow  px-3 py-2 bg-unique text-white m-0 mt-1" style="width:fit-content;">
                            <li class="p-0 m-0 me-lg-2"><i class="fs-6 bi-stack text-white"></i></li>
                            <li class="p-0 m-0 d-none d-lg-block "> Products</li>
                        </ul>
                    </div>
                    <div class=" col-lg-9 col-10 rounded-end text-start">
                        <p class=" p-2 border border-2 text-unique m-0 mt-1" style="width:fit-content;">@ThisTax.Product.Count</p>
                    </div>
                </div>
                <div class="row text-start ">
                    <div class=" col-lg-3  col-2 p-0 text-unique rounded-start">
                        <ul class="d-flex flex-row shadow-sm txtshadow  px-3 py-2 bg-unique text-white m-0 mt-1" style="width:fit-content;">
                            <li class="p-0 m-0 me-lg-2"><i class="fs-6 bi-columns-gap text-white"></i></li>
                            <li class="p-0 m-0 d-none d-lg-block text-white">Categories</li>
                        </ul>
                    </div>
                    <div class=" col-lg-9 col-10 rounded-end text-start">
                        <p class=" p-2 border border-2 text-unique m-0 mt-1" style="width:fit-content;">
                            
                            @((ThisTax.Product)
                                .GroupBy(a => a.Category)
                                .Select(b => new{
                                    Category = b.Key,
                            }).ToList().Count)
                            
                        </p>
                    </div>
                </div>
                <div class="row text-start ">
                    <div class=" col-lg-3  col-2 p-0 text-unique rounded-start">
                        <ul class="d-flex flex-row shadow-sm txtshadow  px-3 py-2 bg-unique text-white m-0 mt-1" style="width:fit-content;">
                            <li class="p-0 m-0 me-lg-2">&#64;</li>
                            <li class="p-0 m-0 d-none d-lg-block text-white">Brands</li>
                        </ul>
                    </div>
                    <div class=" col-lg-9 col-10 rounded-end text-start">
                        <p class=" p-2 border border-2 text-unique m-0 mt-1" style="width:fit-content;">
                            
                            @((ThisTax.Product)
                                .GroupBy(a => a.Brand)
                                .Select(b => new{
                                    Brand = b.Key,
                            }).ToList().Count)
                            
                        </p>
                    </div>
                </div>
                <div class="row text-start  mt-2 bg-unique text-white shadow-sm txtshadow  text-unique">
                    <div class="col-5  py-3">
                        Descriptions
                    </div>
                    <div class="col-7 text-end py-3">
                        <i class="fs-6 bi-pencil-square text-white"></i> @(DateTime.Now.ToString("ddd, dd MMM yy"))
                    </div>
                </div>
                <div class="row text-start  mt-1 text-unique">
                    <div class="col-12 fw-bolder py-2 px-0 opacity-75  ">
                        <p class="p-2 border border-2 text-capitalize" style="width:fit-content;">
                            @ThisTax.TaxDescription
                        </p>
                    </div>
                </div>
            </div>
            <div class="col-12 col-md-7 ps-md-5">
                <div class="row shadow-sm txtshadow text-start  bg-unique text-white ">
                    <div class="col-6  py-3">
                        <i class="fs-6 @TabIcon text-white"></i> @TabCaption
                    </div>
                    <div class="col-6 p-0">
                        <ul class="d-flex flex-row justify-content-end p-0 m-0">
                            <li @onclick=@(()=> SwitchToProductTab()) class="btn py-3 text-unique mx-3"><i class="fs-6 bi-stack text-white"></i></li>
                            <li @onclick=@(()=> SwitchToCategoryTab()) class="btn py-3 text-unique mx-3"><i class="fs-6 bi-columns-gap text-white"></i></li>
                            <li @onclick=@(()=> SwitchToBrandTab()) class="btn py-3 text-unique mx-3"><i class="fs-6 bi-at text-white"></i></li>
                        </ul>
                    </div>
                </div>
                @* Start Dynamic Tabs for Products and Category*@
                    @{
                        if(ProductTab){
                                
                            if(this.ThisTax.Product != null && this.ThisTax.Product.Count > 0){
                                <InTaxProduct TaxToCheck=@ThisTax/>
                            }
                            else{
                        
                                <p class="fs-6 text-center text-unique py-3 px-5  bg-xs my-3 border border-2" style="width:fit-content; margin:1px auto;">No Products info</p>
                                ThisTax.Product = new();
                            }
                        }
                        else if(CategoryTab){

                            if((ThisTax.Product)
                                .GroupBy(a => a.Category)
                                .Select(b => new{
                                    Category = b.Key,
                            }).ToList().Count > 0){
                                <InTaxCategory TaxToCheck=@ThisTax/>
                            }
                            else{
                                <p class="fs-6 text-center text-unique py-3 px-5  bg-xs my-3 border border-2" style="width:fit-content; margin:1px auto;">No Category info</p>
                            }
                        }
                        else if(BrandTab){

                            if((ThisTax.Product)
                                .GroupBy(a => a.Brand)
                                .Select(b => new{
                                    Brand = b.Key,
                            }).ToList().Count > 0){
                                <InTaxBrand TaxToCheck=@ThisTax/>
                            }
                            else{
                                <p class="fs-6 text-center text-unique py-3 px-5  bg-xs my-3 border border-2" style="width:fit-content; margin:1px auto;">No Brand info</p>
                            }
                        }
                    }     
                @* End Dynamic Tabs for Products and Taxes*@
            </div>
        </div>
    }
}
@code{
    [Parameter]
    public int Sn{get;set;}
    public string Title = "Taxes";
    public string SubTitle = "Detail view";
    public string Icon = "at";
    public string OptionIcon = "ui-checks-grid";
    public string Url = "Taxes";
    public string UrlCaption = "List View";
    public string UrlCaptionIcon = "view-stacked";
    public string CreateUrl = "Taxes/Create";
     public string EditUrl = "Taxes/Edit/2";
    private string FungaEdit = "d-block";

 
    //  Tabs Variables
    private bool ProductTab = true;
    private bool CategoryTab = false;
    private bool BrandTab = false;
    private string TabCaption = "Products";
    private string TabIcon = "bi-stack";
    
    //  Pagination 
    private int TotalPages = 1;
    private int CurrentPage = 1;
    private int PageSize = 1 ;
    
    
    // Data Variables
    private Tax ThisTax = new();
    
    protected override async Task OnInitializedAsync(){
        await base.OnInitializedAsync();
        ThisTax.Product = new();
        
        await Start(Sn);
    }
    
    private async Task Start(int cid = 0){
        ThisTax.Product = new();
        using(var repo = new UnitOfWork(MyFactory.CreateDbContext())){
            TotalPages = repo.Taxes.GetNoRecords();
            
            if(cid < 1 && TotalPages > 0){
                ThisTax = (await repo.Taxes.GetAllTaxesDetailedAsync(1,1)).SingleOrDefault();
                CurrentPage = (repo.Taxes.GetIndexOf(ThisTax) + 1 );
                EditUrl = "Taxes/Edit/" + ThisTax.TaxId ;
            }
            else if(cid > 0 && cid <= TotalPages){
                ThisTax = await repo.Taxes.GetDetailedTaxAsync(cid);
                CurrentPage = (repo.Taxes.GetIndexOf(ThisTax) + 1 );
                EditUrl = "Taxes/Edit/" + ThisTax.TaxId ;
            }
            else{
                ThisTax = new();
                ThisTax.Product = new();
            }
            
            await repo.CompleteAsync();
            repo.Dispose(); 
        }
        
        StateHasChanged();
    }
    
    private async Task NextPage(){
        ThisTax.Product = new();
        using(var repo = new UnitOfWork(MyFactory.CreateDbContext())){
            TotalPages = repo.Taxes.GetNoRecords();
            
            if(CurrentPage < TotalPages ){
                CurrentPage ++ ;
            }
            else{
                CurrentPage = TotalPages; 
            }
            
            ThisTax = (await repo.Taxes.GetAllTaxesDetailedAsync(CurrentPage, PageSize)).SingleOrDefault();
            
            await repo.CompleteAsync();
            EditUrl = "Taxes/Edit/" + ThisTax.TaxId ;
            repo.Dispose(); 
        }
    }
    
    private async Task PreviousPage(){
        ThisTax.Product = new();
        using(var repo = new UnitOfWork(MyFactory.CreateDbContext())){
            TotalPages = repo.Taxes.GetNoRecords();
            
            if(CurrentPage > 1 ){
                CurrentPage -- ;
            }
            else{
                CurrentPage = 1; 
            }
            
            ThisTax = (await repo.Taxes.GetAllTaxesDetailedAsync(CurrentPage, PageSize)).SingleOrDefault();
            
            await repo.CompleteAsync();
            EditUrl = "Taxes/Edit/" + ThisTax.TaxId ;
            repo.Dispose(); 
        }
    }
    
    private async Task FirstPage(){
        ThisTax.Product = new();
        using(var repo = new UnitOfWork(MyFactory.CreateDbContext())){
            TotalPages = repo.Taxes.GetNoRecords();
            
            CurrentPage = 1; 
            
            ThisTax = (await repo.Taxes.GetAllTaxesDetailedAsync(CurrentPage, PageSize)).SingleOrDefault();
            
            await repo.CompleteAsync();
            EditUrl = "Taxes/Edit/" + ThisTax.TaxId ;
            repo.Dispose(); 
        }
    }
    
    private async Task LastPage(){
        ThisTax.Product = new();
        using(var repo = new UnitOfWork(MyFactory.CreateDbContext())){
            TotalPages = repo.Taxes.GetNoRecords();
            
            CurrentPage = TotalPages; 
            
            ThisTax = (await repo.Taxes.GetAllTaxesDetailedAsync(CurrentPage, PageSize)).SingleOrDefault();
            
            await repo.CompleteAsync();
            EditUrl = "Taxes/Edit/" + ThisTax.TaxId ;
            repo.Dispose(); 
        }
    }
    
    
    private void SwitchToProductTab(){
        ProductTab = true;
        CategoryTab = false;
        BrandTab = false;
        
        TabCaption = "Products";
        TabIcon = "bi-stack";
    }
    
    private void SwitchToCategoryTab(){
        ProductTab = false;
        CategoryTab = true;
        BrandTab = false;
        
        TabCaption = "Categories";
        TabIcon = "bi-columns-gap";
    }
    private void SwitchToBrandTab(){
        ProductTab = false;
        CategoryTab = false;
        BrandTab = true;
        
        TabCaption = "Brands";
        TabIcon = "bi-at";
    }
}